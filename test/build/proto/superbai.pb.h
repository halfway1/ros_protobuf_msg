// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: superbai.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_superbai_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_superbai_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_superbai_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_superbai_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_superbai_2eproto;
namespace superbai {
namespace sample {
class RosProtoTest;
class RosProtoTestDefaultTypeInternal;
extern RosProtoTestDefaultTypeInternal _RosProtoTest_default_instance_;
}  // namespace sample
}  // namespace superbai
PROTOBUF_NAMESPACE_OPEN
template<> ::superbai::sample::RosProtoTest* Arena::CreateMaybeMessage<::superbai::sample::RosProtoTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace superbai {
namespace sample {

// ===================================================================

class RosProtoTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:superbai.sample.RosProtoTest) */ {
 public:
  inline RosProtoTest() : RosProtoTest(nullptr) {}
  virtual ~RosProtoTest();

  RosProtoTest(const RosProtoTest& from);
  RosProtoTest(RosProtoTest&& from) noexcept
    : RosProtoTest() {
    *this = ::std::move(from);
  }

  inline RosProtoTest& operator=(const RosProtoTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RosProtoTest& operator=(RosProtoTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RosProtoTest& default_instance();

  static inline const RosProtoTest* internal_default_instance() {
    return reinterpret_cast<const RosProtoTest*>(
               &_RosProtoTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RosProtoTest& a, RosProtoTest& b) {
    a.Swap(&b);
  }
  inline void Swap(RosProtoTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RosProtoTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RosProtoTest* New() const final {
    return CreateMaybeMessage<RosProtoTest>(nullptr);
  }

  RosProtoTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RosProtoTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RosProtoTest& from);
  void MergeFrom(const RosProtoTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RosProtoTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "superbai.sample.RosProtoTest";
  }
  protected:
  explicit RosProtoTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_superbai_2eproto);
    return ::descriptor_table_superbai_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 100,
    kNameFieldNumber = 2,
    kAFieldNumber = 3,
    kNumFieldNumber = 1,
  };
  // repeated string n = 100;
  int n_size() const;
  private:
  int _internal_n_size() const;
  public:
  void clear_n();
  const std::string& n(int index) const;
  std::string* mutable_n(int index);
  void set_n(int index, const std::string& value);
  void set_n(int index, std::string&& value);
  void set_n(int index, const char* value);
  void set_n(int index, const char* value, size_t size);
  std::string* add_n();
  void add_n(const std::string& value);
  void add_n(std::string&& value);
  void add_n(const char* value);
  void add_n(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& n() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_n();
  private:
  const std::string& _internal_n(int index) const;
  std::string* _internal_add_n();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double a = 3;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:superbai.sample.RosProtoTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double a_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_superbai_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RosProtoTest

// int32 num = 1;
inline void RosProtoTest::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RosProtoTest::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RosProtoTest::num() const {
  // @@protoc_insertion_point(field_get:superbai.sample.RosProtoTest.num)
  return _internal_num();
}
inline void RosProtoTest::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void RosProtoTest::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:superbai.sample.RosProtoTest.num)
}

// string name = 2;
inline void RosProtoTest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RosProtoTest::name() const {
  // @@protoc_insertion_point(field_get:superbai.sample.RosProtoTest.name)
  return _internal_name();
}
inline void RosProtoTest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:superbai.sample.RosProtoTest.name)
}
inline std::string* RosProtoTest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:superbai.sample.RosProtoTest.name)
  return _internal_mutable_name();
}
inline const std::string& RosProtoTest::_internal_name() const {
  return name_.Get();
}
inline void RosProtoTest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RosProtoTest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:superbai.sample.RosProtoTest.name)
}
inline void RosProtoTest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:superbai.sample.RosProtoTest.name)
}
inline void RosProtoTest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:superbai.sample.RosProtoTest.name)
}
inline std::string* RosProtoTest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RosProtoTest::release_name() {
  // @@protoc_insertion_point(field_release:superbai.sample.RosProtoTest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RosProtoTest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:superbai.sample.RosProtoTest.name)
}

// double a = 3;
inline void RosProtoTest::clear_a() {
  a_ = 0;
}
inline double RosProtoTest::_internal_a() const {
  return a_;
}
inline double RosProtoTest::a() const {
  // @@protoc_insertion_point(field_get:superbai.sample.RosProtoTest.a)
  return _internal_a();
}
inline void RosProtoTest::_internal_set_a(double value) {
  
  a_ = value;
}
inline void RosProtoTest::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:superbai.sample.RosProtoTest.a)
}

// repeated string n = 100;
inline int RosProtoTest::_internal_n_size() const {
  return n_.size();
}
inline int RosProtoTest::n_size() const {
  return _internal_n_size();
}
inline void RosProtoTest::clear_n() {
  n_.Clear();
}
inline std::string* RosProtoTest::add_n() {
  // @@protoc_insertion_point(field_add_mutable:superbai.sample.RosProtoTest.n)
  return _internal_add_n();
}
inline const std::string& RosProtoTest::_internal_n(int index) const {
  return n_.Get(index);
}
inline const std::string& RosProtoTest::n(int index) const {
  // @@protoc_insertion_point(field_get:superbai.sample.RosProtoTest.n)
  return _internal_n(index);
}
inline std::string* RosProtoTest::mutable_n(int index) {
  // @@protoc_insertion_point(field_mutable:superbai.sample.RosProtoTest.n)
  return n_.Mutable(index);
}
inline void RosProtoTest::set_n(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:superbai.sample.RosProtoTest.n)
  n_.Mutable(index)->assign(value);
}
inline void RosProtoTest::set_n(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:superbai.sample.RosProtoTest.n)
  n_.Mutable(index)->assign(std::move(value));
}
inline void RosProtoTest::set_n(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  n_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:superbai.sample.RosProtoTest.n)
}
inline void RosProtoTest::set_n(int index, const char* value, size_t size) {
  n_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:superbai.sample.RosProtoTest.n)
}
inline std::string* RosProtoTest::_internal_add_n() {
  return n_.Add();
}
inline void RosProtoTest::add_n(const std::string& value) {
  n_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:superbai.sample.RosProtoTest.n)
}
inline void RosProtoTest::add_n(std::string&& value) {
  n_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:superbai.sample.RosProtoTest.n)
}
inline void RosProtoTest::add_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  n_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:superbai.sample.RosProtoTest.n)
}
inline void RosProtoTest::add_n(const char* value, size_t size) {
  n_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:superbai.sample.RosProtoTest.n)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RosProtoTest::n() const {
  // @@protoc_insertion_point(field_list:superbai.sample.RosProtoTest.n)
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RosProtoTest::mutable_n() {
  // @@protoc_insertion_point(field_mutable_list:superbai.sample.RosProtoTest.n)
  return &n_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sample
}  // namespace superbai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_superbai_2eproto
